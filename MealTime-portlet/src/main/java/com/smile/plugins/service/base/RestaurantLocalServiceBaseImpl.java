package com.smile.plugins.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.GroupPersistence;
import com.liferay.portal.service.persistence.UserPersistence;
import com.liferay.portal.service.persistence.WorkflowInstanceLinkPersistence;

import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;
import com.liferay.portlet.asset.service.persistence.AssetTagPersistence;
import com.liferay.portlet.messageboards.service.persistence.MBMessagePersistence;

import com.smile.plugins.model.Restaurant;
import com.smile.plugins.service.RestaurantLocalService;
import com.smile.plugins.service.persistence.RestaurantPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the restaurant local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.smile.plugins.service.impl.RestaurantLocalServiceImpl}.
 * </p>
 *
 * @author guillaume Lenoir
 * @see com.smile.plugins.service.impl.RestaurantLocalServiceImpl
 * @see com.smile.plugins.service.RestaurantLocalServiceUtil
 * @generated
 */
public abstract class RestaurantLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements RestaurantLocalService,
        IdentifiableBean {
    @BeanReference(type = com.smile.plugins.service.RestaurantLocalService.class)
    protected com.smile.plugins.service.RestaurantLocalService restaurantLocalService;
    @BeanReference(type = com.smile.plugins.service.RestaurantService.class)
    protected com.smile.plugins.service.RestaurantService restaurantService;
    @BeanReference(type = RestaurantPersistence.class)
    protected RestaurantPersistence restaurantPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.GroupLocalService.class)
    protected com.liferay.portal.service.GroupLocalService groupLocalService;
    @BeanReference(type = com.liferay.portal.service.GroupService.class)
    protected com.liferay.portal.service.GroupService groupService;
    @BeanReference(type = GroupPersistence.class)
    protected GroupPersistence groupPersistence;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    @BeanReference(type = com.liferay.portal.service.WorkflowInstanceLinkLocalService.class)
    protected com.liferay.portal.service.WorkflowInstanceLinkLocalService workflowInstanceLinkLocalService;
    @BeanReference(type = WorkflowInstanceLinkPersistence.class)
    protected WorkflowInstanceLinkPersistence workflowInstanceLinkPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryLocalService.class)
    protected com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryService.class)
    protected com.liferay.portlet.asset.service.AssetEntryService assetEntryService;
    @BeanReference(type = AssetEntryPersistence.class)
    protected AssetEntryPersistence assetEntryPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetTagLocalService.class)
    protected com.liferay.portlet.asset.service.AssetTagLocalService assetTagLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetTagService.class)
    protected com.liferay.portlet.asset.service.AssetTagService assetTagService;
    @BeanReference(type = AssetTagPersistence.class)
    protected AssetTagPersistence assetTagPersistence;
    @BeanReference(type = com.liferay.portlet.messageboards.service.MBMessageLocalService.class)
    protected com.liferay.portlet.messageboards.service.MBMessageLocalService mbMessageLocalService;
    @BeanReference(type = com.liferay.portlet.messageboards.service.MBMessageService.class)
    protected com.liferay.portlet.messageboards.service.MBMessageService mbMessageService;
    @BeanReference(type = MBMessagePersistence.class)
    protected MBMessagePersistence mbMessagePersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private RestaurantLocalServiceClpInvoker _clpInvoker = new RestaurantLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.smile.plugins.service.RestaurantLocalServiceUtil} to access the restaurant local service.
     */

    /**
     * Adds the restaurant to the database. Also notifies the appropriate model listeners.
     *
     * @param restaurant the restaurant
     * @return the restaurant that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Restaurant addRestaurant(Restaurant restaurant)
        throws SystemException {
        restaurant.setNew(true);

        return restaurantPersistence.update(restaurant);
    }

    /**
     * Creates a new restaurant with the primary key. Does not add the restaurant to the database.
     *
     * @param restaurantId the primary key for the new restaurant
     * @return the new restaurant
     */
    @Override
    public Restaurant createRestaurant(long restaurantId) {
        return restaurantPersistence.create(restaurantId);
    }

    /**
     * Deletes the restaurant with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param restaurantId the primary key of the restaurant
     * @return the restaurant that was removed
     * @throws PortalException if a restaurant with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Restaurant deleteRestaurant(long restaurantId)
        throws PortalException, SystemException {
        return restaurantPersistence.remove(restaurantId);
    }

    /**
     * Deletes the restaurant from the database. Also notifies the appropriate model listeners.
     *
     * @param restaurant the restaurant
     * @return the restaurant that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Restaurant deleteRestaurant(Restaurant restaurant)
        throws SystemException {
        return restaurantPersistence.remove(restaurant);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Restaurant.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return restaurantPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.smile.plugins.model.impl.RestaurantModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return restaurantPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.smile.plugins.model.impl.RestaurantModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return restaurantPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return restaurantPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return restaurantPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public Restaurant fetchRestaurant(long restaurantId)
        throws SystemException {
        return restaurantPersistence.fetchByPrimaryKey(restaurantId);
    }

    /**
     * Returns the restaurant with the matching UUID and company.
     *
     * @param uuid the restaurant's UUID
     * @param  companyId the primary key of the company
     * @return the matching restaurant, or <code>null</code> if a matching restaurant could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Restaurant fetchRestaurantByUuidAndCompanyId(String uuid,
        long companyId) throws SystemException {
        return restaurantPersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the restaurant matching the UUID and group.
     *
     * @param uuid the restaurant's UUID
     * @param groupId the primary key of the group
     * @return the matching restaurant, or <code>null</code> if a matching restaurant could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Restaurant fetchRestaurantByUuidAndGroupId(String uuid, long groupId)
        throws SystemException {
        return restaurantPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the restaurant with the primary key.
     *
     * @param restaurantId the primary key of the restaurant
     * @return the restaurant
     * @throws PortalException if a restaurant with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Restaurant getRestaurant(long restaurantId)
        throws PortalException, SystemException {
        return restaurantPersistence.findByPrimaryKey(restaurantId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return restaurantPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the restaurant with the matching UUID and company.
     *
     * @param uuid the restaurant's UUID
     * @param  companyId the primary key of the company
     * @return the matching restaurant
     * @throws PortalException if a matching restaurant could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Restaurant getRestaurantByUuidAndCompanyId(String uuid,
        long companyId) throws PortalException, SystemException {
        return restaurantPersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the restaurant matching the UUID and group.
     *
     * @param uuid the restaurant's UUID
     * @param groupId the primary key of the group
     * @return the matching restaurant
     * @throws PortalException if a matching restaurant could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Restaurant getRestaurantByUuidAndGroupId(String uuid, long groupId)
        throws PortalException, SystemException {
        return restaurantPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the restaurants.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.smile.plugins.model.impl.RestaurantModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of restaurants
     * @param end the upper bound of the range of restaurants (not inclusive)
     * @return the range of restaurants
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Restaurant> getRestaurants(int start, int end)
        throws SystemException {
        return restaurantPersistence.findAll(start, end);
    }

    /**
     * Returns the number of restaurants.
     *
     * @return the number of restaurants
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getRestaurantsCount() throws SystemException {
        return restaurantPersistence.countAll();
    }

    /**
     * Updates the restaurant in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param restaurant the restaurant
     * @return the restaurant that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Restaurant updateRestaurant(Restaurant restaurant)
        throws SystemException {
        return restaurantPersistence.update(restaurant);
    }

    /**
     * Returns the restaurant local service.
     *
     * @return the restaurant local service
     */
    public com.smile.plugins.service.RestaurantLocalService getRestaurantLocalService() {
        return restaurantLocalService;
    }

    /**
     * Sets the restaurant local service.
     *
     * @param restaurantLocalService the restaurant local service
     */
    public void setRestaurantLocalService(
        com.smile.plugins.service.RestaurantLocalService restaurantLocalService) {
        this.restaurantLocalService = restaurantLocalService;
    }

    /**
     * Returns the restaurant remote service.
     *
     * @return the restaurant remote service
     */
    public com.smile.plugins.service.RestaurantService getRestaurantService() {
        return restaurantService;
    }

    /**
     * Sets the restaurant remote service.
     *
     * @param restaurantService the restaurant remote service
     */
    public void setRestaurantService(
        com.smile.plugins.service.RestaurantService restaurantService) {
        this.restaurantService = restaurantService;
    }

    /**
     * Returns the restaurant persistence.
     *
     * @return the restaurant persistence
     */
    public RestaurantPersistence getRestaurantPersistence() {
        return restaurantPersistence;
    }

    /**
     * Sets the restaurant persistence.
     *
     * @param restaurantPersistence the restaurant persistence
     */
    public void setRestaurantPersistence(
        RestaurantPersistence restaurantPersistence) {
        this.restaurantPersistence = restaurantPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the group local service.
     *
     * @return the group local service
     */
    public com.liferay.portal.service.GroupLocalService getGroupLocalService() {
        return groupLocalService;
    }

    /**
     * Sets the group local service.
     *
     * @param groupLocalService the group local service
     */
    public void setGroupLocalService(
        com.liferay.portal.service.GroupLocalService groupLocalService) {
        this.groupLocalService = groupLocalService;
    }

    /**
     * Returns the group remote service.
     *
     * @return the group remote service
     */
    public com.liferay.portal.service.GroupService getGroupService() {
        return groupService;
    }

    /**
     * Sets the group remote service.
     *
     * @param groupService the group remote service
     */
    public void setGroupService(
        com.liferay.portal.service.GroupService groupService) {
        this.groupService = groupService;
    }

    /**
     * Returns the group persistence.
     *
     * @return the group persistence
     */
    public GroupPersistence getGroupPersistence() {
        return groupPersistence;
    }

    /**
     * Sets the group persistence.
     *
     * @param groupPersistence the group persistence
     */
    public void setGroupPersistence(GroupPersistence groupPersistence) {
        this.groupPersistence = groupPersistence;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    /**
     * Returns the workflow instance link local service.
     *
     * @return the workflow instance link local service
     */
    public com.liferay.portal.service.WorkflowInstanceLinkLocalService getWorkflowInstanceLinkLocalService() {
        return workflowInstanceLinkLocalService;
    }

    /**
     * Sets the workflow instance link local service.
     *
     * @param workflowInstanceLinkLocalService the workflow instance link local service
     */
    public void setWorkflowInstanceLinkLocalService(
        com.liferay.portal.service.WorkflowInstanceLinkLocalService workflowInstanceLinkLocalService) {
        this.workflowInstanceLinkLocalService = workflowInstanceLinkLocalService;
    }

    /**
     * Returns the workflow instance link persistence.
     *
     * @return the workflow instance link persistence
     */
    public WorkflowInstanceLinkPersistence getWorkflowInstanceLinkPersistence() {
        return workflowInstanceLinkPersistence;
    }

    /**
     * Sets the workflow instance link persistence.
     *
     * @param workflowInstanceLinkPersistence the workflow instance link persistence
     */
    public void setWorkflowInstanceLinkPersistence(
        WorkflowInstanceLinkPersistence workflowInstanceLinkPersistence) {
        this.workflowInstanceLinkPersistence = workflowInstanceLinkPersistence;
    }

    /**
     * Returns the asset entry local service.
     *
     * @return the asset entry local service
     */
    public com.liferay.portlet.asset.service.AssetEntryLocalService getAssetEntryLocalService() {
        return assetEntryLocalService;
    }

    /**
     * Sets the asset entry local service.
     *
     * @param assetEntryLocalService the asset entry local service
     */
    public void setAssetEntryLocalService(
        com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService) {
        this.assetEntryLocalService = assetEntryLocalService;
    }

    /**
     * Returns the asset entry remote service.
     *
     * @return the asset entry remote service
     */
    public com.liferay.portlet.asset.service.AssetEntryService getAssetEntryService() {
        return assetEntryService;
    }

    /**
     * Sets the asset entry remote service.
     *
     * @param assetEntryService the asset entry remote service
     */
    public void setAssetEntryService(
        com.liferay.portlet.asset.service.AssetEntryService assetEntryService) {
        this.assetEntryService = assetEntryService;
    }

    /**
     * Returns the asset entry persistence.
     *
     * @return the asset entry persistence
     */
    public AssetEntryPersistence getAssetEntryPersistence() {
        return assetEntryPersistence;
    }

    /**
     * Sets the asset entry persistence.
     *
     * @param assetEntryPersistence the asset entry persistence
     */
    public void setAssetEntryPersistence(
        AssetEntryPersistence assetEntryPersistence) {
        this.assetEntryPersistence = assetEntryPersistence;
    }

    /**
     * Returns the asset tag local service.
     *
     * @return the asset tag local service
     */
    public com.liferay.portlet.asset.service.AssetTagLocalService getAssetTagLocalService() {
        return assetTagLocalService;
    }

    /**
     * Sets the asset tag local service.
     *
     * @param assetTagLocalService the asset tag local service
     */
    public void setAssetTagLocalService(
        com.liferay.portlet.asset.service.AssetTagLocalService assetTagLocalService) {
        this.assetTagLocalService = assetTagLocalService;
    }

    /**
     * Returns the asset tag remote service.
     *
     * @return the asset tag remote service
     */
    public com.liferay.portlet.asset.service.AssetTagService getAssetTagService() {
        return assetTagService;
    }

    /**
     * Sets the asset tag remote service.
     *
     * @param assetTagService the asset tag remote service
     */
    public void setAssetTagService(
        com.liferay.portlet.asset.service.AssetTagService assetTagService) {
        this.assetTagService = assetTagService;
    }

    /**
     * Returns the asset tag persistence.
     *
     * @return the asset tag persistence
     */
    public AssetTagPersistence getAssetTagPersistence() {
        return assetTagPersistence;
    }

    /**
     * Sets the asset tag persistence.
     *
     * @param assetTagPersistence the asset tag persistence
     */
    public void setAssetTagPersistence(AssetTagPersistence assetTagPersistence) {
        this.assetTagPersistence = assetTagPersistence;
    }

    /**
     * Returns the message-boards message local service.
     *
     * @return the message-boards message local service
     */
    public com.liferay.portlet.messageboards.service.MBMessageLocalService getMBMessageLocalService() {
        return mbMessageLocalService;
    }

    /**
     * Sets the message-boards message local service.
     *
     * @param mbMessageLocalService the message-boards message local service
     */
    public void setMBMessageLocalService(
        com.liferay.portlet.messageboards.service.MBMessageLocalService mbMessageLocalService) {
        this.mbMessageLocalService = mbMessageLocalService;
    }

    /**
     * Returns the message-boards message remote service.
     *
     * @return the message-boards message remote service
     */
    public com.liferay.portlet.messageboards.service.MBMessageService getMBMessageService() {
        return mbMessageService;
    }

    /**
     * Sets the message-boards message remote service.
     *
     * @param mbMessageService the message-boards message remote service
     */
    public void setMBMessageService(
        com.liferay.portlet.messageboards.service.MBMessageService mbMessageService) {
        this.mbMessageService = mbMessageService;
    }

    /**
     * Returns the message-boards message persistence.
     *
     * @return the message-boards message persistence
     */
    public MBMessagePersistence getMBMessagePersistence() {
        return mbMessagePersistence;
    }

    /**
     * Sets the message-boards message persistence.
     *
     * @param mbMessagePersistence the message-boards message persistence
     */
    public void setMBMessagePersistence(
        MBMessagePersistence mbMessagePersistence) {
        this.mbMessagePersistence = mbMessagePersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.smile.plugins.model.Restaurant",
            restaurantLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.smile.plugins.model.Restaurant");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Restaurant.class;
    }

    protected String getModelClassName() {
        return Restaurant.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = restaurantPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
