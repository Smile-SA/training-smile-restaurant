package com.smile.plugins.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.smile.plugins.model.Restaurant;
import com.smile.plugins.model.RestaurantModel;
import com.smile.plugins.model.RestaurantSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Restaurant service. Represents a row in the &quot;MealTime_Restaurant&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.smile.plugins.model.RestaurantModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RestaurantImpl}.
 * </p>
 *
 * @author guillaume Lenoir
 * @see RestaurantImpl
 * @see com.smile.plugins.model.Restaurant
 * @see com.smile.plugins.model.RestaurantModel
 * @generated
 */
@JSON(strict = true)
public class RestaurantModelImpl extends BaseModelImpl<Restaurant>
    implements RestaurantModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a restaurant model instance should use the {@link com.smile.plugins.model.Restaurant} interface instead.
     */
    public static final String TABLE_NAME = "MealTime_Restaurant";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "restaurantId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "status", Types.INTEGER },
            { "statusByUserId", Types.BIGINT },
            { "statusByUserName", Types.VARCHAR },
            { "statusDate", Types.TIMESTAMP },
            { "emailAddress", Types.VARCHAR },
            { "name", Types.VARCHAR },
            { "countryId", Types.BIGINT },
            { "regionId", Types.BIGINT },
            { "phoneNumber", Types.VARCHAR },
            { "street1", Types.VARCHAR },
            { "street2", Types.VARCHAR },
            { "zip", Types.VARCHAR },
            { "city", Types.VARCHAR },
            { "logoId", Types.BIGINT },
            { "logoDescription", Types.VARCHAR },
            { "description", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table MealTime_Restaurant (uuid_ VARCHAR(75) null,restaurantId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,emailAddress VARCHAR(75) null,name STRING null,countryId LONG,regionId LONG,phoneNumber VARCHAR(75) null,street1 VARCHAR(75) null,street2 VARCHAR(75) null,zip VARCHAR(75) null,city VARCHAR(75) null,logoId LONG,logoDescription STRING null,description STRING null)";
    public static final String TABLE_SQL_DROP = "drop table MealTime_Restaurant";
    public static final String ORDER_BY_JPQL = " ORDER BY restaurant.createDate DESC";
    public static final String ORDER_BY_SQL = " ORDER BY MealTime_Restaurant.createDate DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.smile.plugins.model.Restaurant"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.smile.plugins.model.Restaurant"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.smile.plugins.model.Restaurant"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long UUID_COLUMN_BITMASK = 4L;
    public static long CREATEDATE_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.smile.plugins.model.Restaurant"));
    private static ClassLoader _classLoader = Restaurant.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Restaurant.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _restaurantId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private int _status;
    private long _statusByUserId;
    private String _statusByUserUuid;
    private String _statusByUserName;
    private Date _statusDate;
    private String _emailAddress;
    private String _name;
    private String _nameCurrentLanguageId;
    private long _countryId;
    private long _regionId;
    private String _phoneNumber;
    private String _street1;
    private String _street2;
    private String _zip;
    private String _city;
    private long _logoId;
    private String _logoDescription;
    private String _logoDescriptionCurrentLanguageId;
    private String _description;
    private String _descriptionCurrentLanguageId;
    private long _columnBitmask;
    private Restaurant _escapedModel;

    public RestaurantModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Restaurant toModel(RestaurantSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Restaurant model = new RestaurantImpl();

        model.setUuid(soapModel.getUuid());
        model.setRestaurantId(soapModel.getRestaurantId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setStatus(soapModel.getStatus());
        model.setStatusByUserId(soapModel.getStatusByUserId());
        model.setStatusByUserName(soapModel.getStatusByUserName());
        model.setStatusDate(soapModel.getStatusDate());
        model.setEmailAddress(soapModel.getEmailAddress());
        model.setName(soapModel.getName());
        model.setCountryId(soapModel.getCountryId());
        model.setRegionId(soapModel.getRegionId());
        model.setPhoneNumber(soapModel.getPhoneNumber());
        model.setStreet1(soapModel.getStreet1());
        model.setStreet2(soapModel.getStreet2());
        model.setZip(soapModel.getZip());
        model.setCity(soapModel.getCity());
        model.setLogoId(soapModel.getLogoId());
        model.setLogoDescription(soapModel.getLogoDescription());
        model.setDescription(soapModel.getDescription());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Restaurant> toModels(RestaurantSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Restaurant> models = new ArrayList<Restaurant>(soapModels.length);

        for (RestaurantSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _restaurantId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setRestaurantId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _restaurantId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Restaurant.class;
    }

    @Override
    public String getModelClassName() {
        return Restaurant.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("restaurantId", getRestaurantId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("status", getStatus());
        attributes.put("statusByUserId", getStatusByUserId());
        attributes.put("statusByUserName", getStatusByUserName());
        attributes.put("statusDate", getStatusDate());
        attributes.put("emailAddress", getEmailAddress());
        attributes.put("name", getName());
        attributes.put("countryId", getCountryId());
        attributes.put("regionId", getRegionId());
        attributes.put("phoneNumber", getPhoneNumber());
        attributes.put("street1", getStreet1());
        attributes.put("street2", getStreet2());
        attributes.put("zip", getZip());
        attributes.put("city", getCity());
        attributes.put("logoId", getLogoId());
        attributes.put("logoDescription", getLogoDescription());
        attributes.put("description", getDescription());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long restaurantId = (Long) attributes.get("restaurantId");

        if (restaurantId != null) {
            setRestaurantId(restaurantId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Long statusByUserId = (Long) attributes.get("statusByUserId");

        if (statusByUserId != null) {
            setStatusByUserId(statusByUserId);
        }

        String statusByUserName = (String) attributes.get("statusByUserName");

        if (statusByUserName != null) {
            setStatusByUserName(statusByUserName);
        }

        Date statusDate = (Date) attributes.get("statusDate");

        if (statusDate != null) {
            setStatusDate(statusDate);
        }

        String emailAddress = (String) attributes.get("emailAddress");

        if (emailAddress != null) {
            setEmailAddress(emailAddress);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Long countryId = (Long) attributes.get("countryId");

        if (countryId != null) {
            setCountryId(countryId);
        }

        Long regionId = (Long) attributes.get("regionId");

        if (regionId != null) {
            setRegionId(regionId);
        }

        String phoneNumber = (String) attributes.get("phoneNumber");

        if (phoneNumber != null) {
            setPhoneNumber(phoneNumber);
        }

        String street1 = (String) attributes.get("street1");

        if (street1 != null) {
            setStreet1(street1);
        }

        String street2 = (String) attributes.get("street2");

        if (street2 != null) {
            setStreet2(street2);
        }

        String zip = (String) attributes.get("zip");

        if (zip != null) {
            setZip(zip);
        }

        String city = (String) attributes.get("city");

        if (city != null) {
            setCity(city);
        }

        Long logoId = (Long) attributes.get("logoId");

        if (logoId != null) {
            setLogoId(logoId);
        }

        String logoDescription = (String) attributes.get("logoDescription");

        if (logoDescription != null) {
            setLogoDescription(logoDescription);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getRestaurantId() {
        return _restaurantId;
    }

    @Override
    public void setRestaurantId(long restaurantId) {
        _restaurantId = restaurantId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _columnBitmask = -1L;

        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _status = status;
    }

    @JSON
    @Override
    public long getStatusByUserId() {
        return _statusByUserId;
    }

    @Override
    public void setStatusByUserId(long statusByUserId) {
        _statusByUserId = statusByUserId;
    }

    @Override
    public String getStatusByUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
            _statusByUserUuid);
    }

    @Override
    public void setStatusByUserUuid(String statusByUserUuid) {
        _statusByUserUuid = statusByUserUuid;
    }

    @JSON
    @Override
    public String getStatusByUserName() {
        if (_statusByUserName == null) {
            return StringPool.BLANK;
        } else {
            return _statusByUserName;
        }
    }

    @Override
    public void setStatusByUserName(String statusByUserName) {
        _statusByUserName = statusByUserName;
    }

    @JSON
    @Override
    public Date getStatusDate() {
        return _statusDate;
    }

    @Override
    public void setStatusDate(Date statusDate) {
        _statusDate = statusDate;
    }

    @JSON
    @Override
    public String getEmailAddress() {
        if (_emailAddress == null) {
            return StringPool.BLANK;
        } else {
            return _emailAddress;
        }
    }

    @Override
    public void setEmailAddress(String emailAddress) {
        _emailAddress = emailAddress;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public String getName(Locale locale) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getName(languageId);
    }

    @Override
    public String getName(Locale locale, boolean useDefault) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getName(languageId, useDefault);
    }

    @Override
    public String getName(String languageId) {
        return LocalizationUtil.getLocalization(getName(), languageId);
    }

    @Override
    public String getName(String languageId, boolean useDefault) {
        return LocalizationUtil.getLocalization(getName(), languageId,
            useDefault);
    }

    @Override
    public String getNameCurrentLanguageId() {
        return _nameCurrentLanguageId;
    }

    @JSON
    @Override
    public String getNameCurrentValue() {
        Locale locale = getLocale(_nameCurrentLanguageId);

        return getName(locale);
    }

    @Override
    public Map<Locale, String> getNameMap() {
        return LocalizationUtil.getLocalizationMap(getName());
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public void setName(String name, Locale locale) {
        setName(name, locale, LocaleUtil.getSiteDefault());
    }

    @Override
    public void setName(String name, Locale locale, Locale defaultLocale) {
        String languageId = LocaleUtil.toLanguageId(locale);
        String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

        if (Validator.isNotNull(name)) {
            setName(LocalizationUtil.updateLocalization(getName(), "Name",
                    name, languageId, defaultLanguageId));
        } else {
            setName(LocalizationUtil.removeLocalization(getName(), "Name",
                    languageId));
        }
    }

    @Override
    public void setNameCurrentLanguageId(String languageId) {
        _nameCurrentLanguageId = languageId;
    }

    @Override
    public void setNameMap(Map<Locale, String> nameMap) {
        setNameMap(nameMap, LocaleUtil.getSiteDefault());
    }

    @Override
    public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
        if (nameMap == null) {
            return;
        }

        setName(LocalizationUtil.updateLocalization(nameMap, getName(), "Name",
                LocaleUtil.toLanguageId(defaultLocale)));
    }

    @JSON
    @Override
    public long getCountryId() {
        return _countryId;
    }

    @Override
    public void setCountryId(long countryId) {
        _countryId = countryId;
    }

    @JSON
    @Override
    public long getRegionId() {
        return _regionId;
    }

    @Override
    public void setRegionId(long regionId) {
        _regionId = regionId;
    }

    @JSON
    @Override
    public String getPhoneNumber() {
        if (_phoneNumber == null) {
            return StringPool.BLANK;
        } else {
            return _phoneNumber;
        }
    }

    @Override
    public void setPhoneNumber(String phoneNumber) {
        _phoneNumber = phoneNumber;
    }

    @JSON
    @Override
    public String getStreet1() {
        if (_street1 == null) {
            return StringPool.BLANK;
        } else {
            return _street1;
        }
    }

    @Override
    public void setStreet1(String street1) {
        _street1 = street1;
    }

    @JSON
    @Override
    public String getStreet2() {
        if (_street2 == null) {
            return StringPool.BLANK;
        } else {
            return _street2;
        }
    }

    @Override
    public void setStreet2(String street2) {
        _street2 = street2;
    }

    @JSON
    @Override
    public String getZip() {
        if (_zip == null) {
            return StringPool.BLANK;
        } else {
            return _zip;
        }
    }

    @Override
    public void setZip(String zip) {
        _zip = zip;
    }

    @JSON
    @Override
    public String getCity() {
        if (_city == null) {
            return StringPool.BLANK;
        } else {
            return _city;
        }
    }

    @Override
    public void setCity(String city) {
        _city = city;
    }

    @JSON
    @Override
    public long getLogoId() {
        return _logoId;
    }

    @Override
    public void setLogoId(long logoId) {
        _logoId = logoId;
    }

    @JSON
    @Override
    public String getLogoDescription() {
        if (_logoDescription == null) {
            return StringPool.BLANK;
        } else {
            return _logoDescription;
        }
    }

    @Override
    public String getLogoDescription(Locale locale) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getLogoDescription(languageId);
    }

    @Override
    public String getLogoDescription(Locale locale, boolean useDefault) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getLogoDescription(languageId, useDefault);
    }

    @Override
    public String getLogoDescription(String languageId) {
        return LocalizationUtil.getLocalization(getLogoDescription(), languageId);
    }

    @Override
    public String getLogoDescription(String languageId, boolean useDefault) {
        return LocalizationUtil.getLocalization(getLogoDescription(),
            languageId, useDefault);
    }

    @Override
    public String getLogoDescriptionCurrentLanguageId() {
        return _logoDescriptionCurrentLanguageId;
    }

    @JSON
    @Override
    public String getLogoDescriptionCurrentValue() {
        Locale locale = getLocale(_logoDescriptionCurrentLanguageId);

        return getLogoDescription(locale);
    }

    @Override
    public Map<Locale, String> getLogoDescriptionMap() {
        return LocalizationUtil.getLocalizationMap(getLogoDescription());
    }

    @Override
    public void setLogoDescription(String logoDescription) {
        _logoDescription = logoDescription;
    }

    @Override
    public void setLogoDescription(String logoDescription, Locale locale) {
        setLogoDescription(logoDescription, locale, LocaleUtil.getSiteDefault());
    }

    @Override
    public void setLogoDescription(String logoDescription, Locale locale,
        Locale defaultLocale) {
        String languageId = LocaleUtil.toLanguageId(locale);
        String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

        if (Validator.isNotNull(logoDescription)) {
            setLogoDescription(LocalizationUtil.updateLocalization(
                    getLogoDescription(), "LogoDescription", logoDescription,
                    languageId, defaultLanguageId));
        } else {
            setLogoDescription(LocalizationUtil.removeLocalization(
                    getLogoDescription(), "LogoDescription", languageId));
        }
    }

    @Override
    public void setLogoDescriptionCurrentLanguageId(String languageId) {
        _logoDescriptionCurrentLanguageId = languageId;
    }

    @Override
    public void setLogoDescriptionMap(Map<Locale, String> logoDescriptionMap) {
        setLogoDescriptionMap(logoDescriptionMap, LocaleUtil.getSiteDefault());
    }

    @Override
    public void setLogoDescriptionMap(Map<Locale, String> logoDescriptionMap,
        Locale defaultLocale) {
        if (logoDescriptionMap == null) {
            return;
        }

        setLogoDescription(LocalizationUtil.updateLocalization(
                logoDescriptionMap, getLogoDescription(), "LogoDescription",
                LocaleUtil.toLanguageId(defaultLocale)));
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public String getDescription(Locale locale) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getDescription(languageId);
    }

    @Override
    public String getDescription(Locale locale, boolean useDefault) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getDescription(languageId, useDefault);
    }

    @Override
    public String getDescription(String languageId) {
        return LocalizationUtil.getLocalization(getDescription(), languageId);
    }

    @Override
    public String getDescription(String languageId, boolean useDefault) {
        return LocalizationUtil.getLocalization(getDescription(), languageId,
            useDefault);
    }

    @Override
    public String getDescriptionCurrentLanguageId() {
        return _descriptionCurrentLanguageId;
    }

    @JSON
    @Override
    public String getDescriptionCurrentValue() {
        Locale locale = getLocale(_descriptionCurrentLanguageId);

        return getDescription(locale);
    }

    @Override
    public Map<Locale, String> getDescriptionMap() {
        return LocalizationUtil.getLocalizationMap(getDescription());
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public void setDescription(String description, Locale locale) {
        setDescription(description, locale, LocaleUtil.getSiteDefault());
    }

    @Override
    public void setDescription(String description, Locale locale,
        Locale defaultLocale) {
        String languageId = LocaleUtil.toLanguageId(locale);
        String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

        if (Validator.isNotNull(description)) {
            setDescription(LocalizationUtil.updateLocalization(
                    getDescription(), "Description", description, languageId,
                    defaultLanguageId));
        } else {
            setDescription(LocalizationUtil.removeLocalization(
                    getDescription(), "Description", languageId));
        }
    }

    @Override
    public void setDescriptionCurrentLanguageId(String languageId) {
        _descriptionCurrentLanguageId = languageId;
    }

    @Override
    public void setDescriptionMap(Map<Locale, String> descriptionMap) {
        setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
    }

    @Override
    public void setDescriptionMap(Map<Locale, String> descriptionMap,
        Locale defaultLocale) {
        if (descriptionMap == null) {
            return;
        }

        setDescription(LocalizationUtil.updateLocalization(descriptionMap,
                getDescription(), "Description",
                LocaleUtil.toLanguageId(defaultLocale)));
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                Restaurant.class.getName()));
    }

    /**
     * @deprecated As of 6.1.0, replaced by {@link #isApproved}
     */
    @Override
    public boolean getApproved() {
        return isApproved();
    }

    @Override
    public boolean isApproved() {
        if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isDenied() {
        if (getStatus() == WorkflowConstants.STATUS_DENIED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isDraft() {
        if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isExpired() {
        if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isInactive() {
        if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isIncomplete() {
        if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isPending() {
        if (getStatus() == WorkflowConstants.STATUS_PENDING) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isScheduled() {
        if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
            return true;
        } else {
            return false;
        }
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Restaurant.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public String[] getAvailableLanguageIds() {
        Set<String> availableLanguageIds = new TreeSet<String>();

        Map<Locale, String> nameMap = getNameMap();

        for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
            Locale locale = entry.getKey();
            String value = entry.getValue();

            if (Validator.isNotNull(value)) {
                availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
            }
        }

        Map<Locale, String> logoDescriptionMap = getLogoDescriptionMap();

        for (Map.Entry<Locale, String> entry : logoDescriptionMap.entrySet()) {
            Locale locale = entry.getKey();
            String value = entry.getValue();

            if (Validator.isNotNull(value)) {
                availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
            }
        }

        Map<Locale, String> descriptionMap = getDescriptionMap();

        for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
            Locale locale = entry.getKey();
            String value = entry.getValue();

            if (Validator.isNotNull(value)) {
                availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
            }
        }

        return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
    }

    @Override
    public String getDefaultLanguageId() {
        String xml = getName();

        if (xml == null) {
            return StringPool.BLANK;
        }

        return LocalizationUtil.getDefaultLanguageId(xml);
    }

    @Override
    public void prepareLocalizedFieldsForImport() throws LocaleException {
        prepareLocalizedFieldsForImport(null);
    }

    @Override
    @SuppressWarnings("unused")
    public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
        throws LocaleException {
        Locale defaultLocale = LocaleUtil.getDefault();

        String modelDefaultLanguageId = getDefaultLanguageId();

        String name = getName(defaultLocale);

        if (Validator.isNull(name)) {
            setName(getName(modelDefaultLanguageId), defaultLocale);
        } else {
            setName(getName(defaultLocale), defaultLocale, defaultLocale);
        }

        String logoDescription = getLogoDescription(defaultLocale);

        if (Validator.isNull(logoDescription)) {
            setLogoDescription(getLogoDescription(modelDefaultLanguageId),
                defaultLocale);
        } else {
            setLogoDescription(getLogoDescription(defaultLocale),
                defaultLocale, defaultLocale);
        }

        String description = getDescription(defaultLocale);

        if (Validator.isNull(description)) {
            setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
        } else {
            setDescription(getDescription(defaultLocale), defaultLocale,
                defaultLocale);
        }
    }

    @Override
    public Restaurant toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Restaurant) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RestaurantImpl restaurantImpl = new RestaurantImpl();

        restaurantImpl.setUuid(getUuid());
        restaurantImpl.setRestaurantId(getRestaurantId());
        restaurantImpl.setGroupId(getGroupId());
        restaurantImpl.setCompanyId(getCompanyId());
        restaurantImpl.setUserId(getUserId());
        restaurantImpl.setUserName(getUserName());
        restaurantImpl.setCreateDate(getCreateDate());
        restaurantImpl.setModifiedDate(getModifiedDate());
        restaurantImpl.setStatus(getStatus());
        restaurantImpl.setStatusByUserId(getStatusByUserId());
        restaurantImpl.setStatusByUserName(getStatusByUserName());
        restaurantImpl.setStatusDate(getStatusDate());
        restaurantImpl.setEmailAddress(getEmailAddress());
        restaurantImpl.setName(getName());
        restaurantImpl.setCountryId(getCountryId());
        restaurantImpl.setRegionId(getRegionId());
        restaurantImpl.setPhoneNumber(getPhoneNumber());
        restaurantImpl.setStreet1(getStreet1());
        restaurantImpl.setStreet2(getStreet2());
        restaurantImpl.setZip(getZip());
        restaurantImpl.setCity(getCity());
        restaurantImpl.setLogoId(getLogoId());
        restaurantImpl.setLogoDescription(getLogoDescription());
        restaurantImpl.setDescription(getDescription());

        restaurantImpl.resetOriginalValues();

        return restaurantImpl;
    }

    @Override
    public int compareTo(Restaurant restaurant) {
        int value = 0;

        value = DateUtil.compareTo(getCreateDate(), restaurant.getCreateDate());

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Restaurant)) {
            return false;
        }

        Restaurant restaurant = (Restaurant) obj;

        long primaryKey = restaurant.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        RestaurantModelImpl restaurantModelImpl = this;

        restaurantModelImpl._originalUuid = restaurantModelImpl._uuid;

        restaurantModelImpl._originalGroupId = restaurantModelImpl._groupId;

        restaurantModelImpl._setOriginalGroupId = false;

        restaurantModelImpl._originalCompanyId = restaurantModelImpl._companyId;

        restaurantModelImpl._setOriginalCompanyId = false;

        restaurantModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Restaurant> toCacheModel() {
        RestaurantCacheModel restaurantCacheModel = new RestaurantCacheModel();

        restaurantCacheModel.uuid = getUuid();

        String uuid = restaurantCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            restaurantCacheModel.uuid = null;
        }

        restaurantCacheModel.restaurantId = getRestaurantId();

        restaurantCacheModel.groupId = getGroupId();

        restaurantCacheModel.companyId = getCompanyId();

        restaurantCacheModel.userId = getUserId();

        restaurantCacheModel.userName = getUserName();

        String userName = restaurantCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            restaurantCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            restaurantCacheModel.createDate = createDate.getTime();
        } else {
            restaurantCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            restaurantCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            restaurantCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        restaurantCacheModel.status = getStatus();

        restaurantCacheModel.statusByUserId = getStatusByUserId();

        restaurantCacheModel.statusByUserName = getStatusByUserName();

        String statusByUserName = restaurantCacheModel.statusByUserName;

        if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
            restaurantCacheModel.statusByUserName = null;
        }

        Date statusDate = getStatusDate();

        if (statusDate != null) {
            restaurantCacheModel.statusDate = statusDate.getTime();
        } else {
            restaurantCacheModel.statusDate = Long.MIN_VALUE;
        }

        restaurantCacheModel.emailAddress = getEmailAddress();

        String emailAddress = restaurantCacheModel.emailAddress;

        if ((emailAddress != null) && (emailAddress.length() == 0)) {
            restaurantCacheModel.emailAddress = null;
        }

        restaurantCacheModel.name = getName();

        String name = restaurantCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            restaurantCacheModel.name = null;
        }

        restaurantCacheModel.countryId = getCountryId();

        restaurantCacheModel.regionId = getRegionId();

        restaurantCacheModel.phoneNumber = getPhoneNumber();

        String phoneNumber = restaurantCacheModel.phoneNumber;

        if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
            restaurantCacheModel.phoneNumber = null;
        }

        restaurantCacheModel.street1 = getStreet1();

        String street1 = restaurantCacheModel.street1;

        if ((street1 != null) && (street1.length() == 0)) {
            restaurantCacheModel.street1 = null;
        }

        restaurantCacheModel.street2 = getStreet2();

        String street2 = restaurantCacheModel.street2;

        if ((street2 != null) && (street2.length() == 0)) {
            restaurantCacheModel.street2 = null;
        }

        restaurantCacheModel.zip = getZip();

        String zip = restaurantCacheModel.zip;

        if ((zip != null) && (zip.length() == 0)) {
            restaurantCacheModel.zip = null;
        }

        restaurantCacheModel.city = getCity();

        String city = restaurantCacheModel.city;

        if ((city != null) && (city.length() == 0)) {
            restaurantCacheModel.city = null;
        }

        restaurantCacheModel.logoId = getLogoId();

        restaurantCacheModel.logoDescription = getLogoDescription();

        String logoDescription = restaurantCacheModel.logoDescription;

        if ((logoDescription != null) && (logoDescription.length() == 0)) {
            restaurantCacheModel.logoDescription = null;
        }

        restaurantCacheModel.description = getDescription();

        String description = restaurantCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            restaurantCacheModel.description = null;
        }

        return restaurantCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(49);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", restaurantId=");
        sb.append(getRestaurantId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", statusByUserId=");
        sb.append(getStatusByUserId());
        sb.append(", statusByUserName=");
        sb.append(getStatusByUserName());
        sb.append(", statusDate=");
        sb.append(getStatusDate());
        sb.append(", emailAddress=");
        sb.append(getEmailAddress());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", countryId=");
        sb.append(getCountryId());
        sb.append(", regionId=");
        sb.append(getRegionId());
        sb.append(", phoneNumber=");
        sb.append(getPhoneNumber());
        sb.append(", street1=");
        sb.append(getStreet1());
        sb.append(", street2=");
        sb.append(getStreet2());
        sb.append(", zip=");
        sb.append(getZip());
        sb.append(", city=");
        sb.append(getCity());
        sb.append(", logoId=");
        sb.append(getLogoId());
        sb.append(", logoDescription=");
        sb.append(getLogoDescription());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(76);

        sb.append("<model><model-name>");
        sb.append("com.smile.plugins.model.Restaurant");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>restaurantId</column-name><column-value><![CDATA[");
        sb.append(getRestaurantId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
        sb.append(getStatusByUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
        sb.append(getStatusByUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusDate</column-name><column-value><![CDATA[");
        sb.append(getStatusDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailAddress</column-name><column-value><![CDATA[");
        sb.append(getEmailAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>countryId</column-name><column-value><![CDATA[");
        sb.append(getCountryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>regionId</column-name><column-value><![CDATA[");
        sb.append(getRegionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>phoneNumber</column-name><column-value><![CDATA[");
        sb.append(getPhoneNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>street1</column-name><column-value><![CDATA[");
        sb.append(getStreet1());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>street2</column-name><column-value><![CDATA[");
        sb.append(getStreet2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>zip</column-name><column-value><![CDATA[");
        sb.append(getZip());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>city</column-name><column-value><![CDATA[");
        sb.append(getCity());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>logoId</column-name><column-value><![CDATA[");
        sb.append(getLogoId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>logoDescription</column-name><column-value><![CDATA[");
        sb.append(getLogoDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
